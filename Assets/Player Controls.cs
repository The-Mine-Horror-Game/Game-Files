//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Player Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player Controls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""98784de3-01c1-4ca6-955b-3f1b68d6d869"",
            ""actions"": [
                {
                    ""name"": ""Flashlight"",
                    ""type"": ""Button"",
                    ""id"": ""72c4903b-1e63-4578-80b1-7fd3b3000936"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""45fdaf14-416d-42e4-894d-ef1194cca980"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""47873611-7fc8-43e7-a7e2-16c7b2b74191"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""925daf13-ba6b-4f38-81f6-dccca008aac6"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lean"",
                    ""type"": ""Value"",
                    ""id"": ""6ca0c31a-a605-430d-aa48-f0f6c432cca7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""60a7359f-f897-4706-9edb-01d9698c7205"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Tablet"",
                    ""type"": ""Button"",
                    ""id"": ""5f8a2b07-a910-4839-9d16-3eba8b412d6c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""3a682fa6-0b47-48c8-86dc-fb5427274eba"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Flashlight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f1a164ad-2717-405e-a6c8-5a78e9d04b8c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""48ea9f93-b168-4173-bfd8-edbe2817075a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""36548835-2ce0-45a0-97ae-39aae2d6ce78"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c56e5c1d-9d43-4e4e-984f-0fa578edb777"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""bfcd0311-231b-406e-a1dd-aa50a62a4428"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c77c84b9-2ad3-4a3d-b67a-10d72d7b488a"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a30be08b-0240-4e37-87b8-c7a05c1f501a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4f4e7595-e7f4-4ea3-881d-2c2cef6a9f01"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""dd55fb61-43b0-447a-9312-915c5975470b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""a80d6d27-b80d-4ccd-b56a-82f5a952f623"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lean"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""567ce344-25ad-4b3c-9cc1-68db4314299e"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f6452fdd-b181-4210-aabf-aaa2f34e7cf1"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tablet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""4f71b213-e861-4ce7-a151-64c80186fe38"",
            ""actions"": [
                {
                    ""name"": ""New action"",
                    ""type"": ""Button"",
                    ""id"": ""ad50f3b1-fc89-4a2f-b386-679f6cb151e8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": []
        },
        {
            ""name"": ""Tablet"",
            ""id"": ""39e3886f-8205-4c6b-97da-33a99c18d844"",
            ""actions"": [
                {
                    ""name"": ""SwitchCamUp"",
                    ""type"": ""Button"",
                    ""id"": ""e395c98e-5b9a-4475-abaf-8b59f5287013"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchCamDown"",
                    ""type"": ""Button"",
                    ""id"": ""2ec5bad9-bb89-4dc0-ba6d-1aa981e87d9f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateCam"",
                    ""type"": ""Value"",
                    ""id"": ""9595a2a4-3180-4fd6-80cb-bab8d76b3954"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tablet"",
                    ""type"": ""Button"",
                    ""id"": ""2c960d57-1b3c-417d-a802-3706cf0b4907"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""4e21c5d2-3073-401f-925d-32122789bc65"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eac7aa96-f0ad-45b9-bda4-10233acce02f"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchCamDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""15bda6ce-20d6-4c71-a3e0-3015f7f28306"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCam"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""dd3ceb3f-897f-42eb-98a5-ae80abb97237"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""510b114d-6cc5-411d-9148-930e1366367c"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""29fd7531-b06f-4eda-bfb8-8870ee778752"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b346a4e6-e203-409f-8700-da94d2052a5a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateCam"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""1b2fcabd-f56d-4915-9f80-f41e5b4ad8c2"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tablet"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Flashlight = m_Player.FindAction("Flashlight", throwIfNotFound: true);
        m_Player_Movement = m_Player.FindAction("Movement", throwIfNotFound: true);
        m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Lean = m_Player.FindAction("Lean", throwIfNotFound: true);
        m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Player_Tablet = m_Player.FindAction("Tablet", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Newaction = m_UI.FindAction("New action", throwIfNotFound: true);
        // Tablet
        m_Tablet = asset.FindActionMap("Tablet", throwIfNotFound: true);
        m_Tablet_SwitchCamUp = m_Tablet.FindAction("SwitchCamUp", throwIfNotFound: true);
        m_Tablet_SwitchCamDown = m_Tablet.FindAction("SwitchCamDown", throwIfNotFound: true);
        m_Tablet_RotateCam = m_Tablet.FindAction("RotateCam", throwIfNotFound: true);
        m_Tablet_Tablet = m_Tablet.FindAction("Tablet", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_Flashlight;
    private readonly InputAction m_Player_Movement;
    private readonly InputAction m_Player_Sprint;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Lean;
    private readonly InputAction m_Player_Crouch;
    private readonly InputAction m_Player_Tablet;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Flashlight => m_Wrapper.m_Player_Flashlight;
        public InputAction @Movement => m_Wrapper.m_Player_Movement;
        public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Lean => m_Wrapper.m_Player_Lean;
        public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
        public InputAction @Tablet => m_Wrapper.m_Player_Tablet;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @Flashlight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlashlight;
                @Flashlight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlashlight;
                @Flashlight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnFlashlight;
                @Movement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnMovement;
                @Sprint.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Sprint.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprint;
                @Interact.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Interact.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnInteract;
                @Lean.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLean;
                @Lean.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLean;
                @Lean.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnLean;
                @Crouch.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Crouch.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Crouch.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnCrouch;
                @Tablet.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTablet;
                @Tablet.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTablet;
                @Tablet.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnTablet;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Flashlight.started += instance.OnFlashlight;
                @Flashlight.performed += instance.OnFlashlight;
                @Flashlight.canceled += instance.OnFlashlight;
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Lean.started += instance.OnLean;
                @Lean.performed += instance.OnLean;
                @Lean.canceled += instance.OnLean;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @Tablet.started += instance.OnTablet;
                @Tablet.performed += instance.OnTablet;
                @Tablet.canceled += instance.OnTablet;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private IUIActions m_UIActionsCallbackInterface;
    private readonly InputAction m_UI_Newaction;
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Newaction => m_Wrapper.m_UI_Newaction;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void SetCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterface != null)
            {
                @Newaction.started -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
                @Newaction.performed -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
                @Newaction.canceled -= m_Wrapper.m_UIActionsCallbackInterface.OnNewaction;
            }
            m_Wrapper.m_UIActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Newaction.started += instance.OnNewaction;
                @Newaction.performed += instance.OnNewaction;
                @Newaction.canceled += instance.OnNewaction;
            }
        }
    }
    public UIActions @UI => new UIActions(this);

    // Tablet
    private readonly InputActionMap m_Tablet;
    private ITabletActions m_TabletActionsCallbackInterface;
    private readonly InputAction m_Tablet_SwitchCamUp;
    private readonly InputAction m_Tablet_SwitchCamDown;
    private readonly InputAction m_Tablet_RotateCam;
    private readonly InputAction m_Tablet_Tablet;
    public struct TabletActions
    {
        private @PlayerControls m_Wrapper;
        public TabletActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchCamUp => m_Wrapper.m_Tablet_SwitchCamUp;
        public InputAction @SwitchCamDown => m_Wrapper.m_Tablet_SwitchCamDown;
        public InputAction @RotateCam => m_Wrapper.m_Tablet_RotateCam;
        public InputAction @Tablet => m_Wrapper.m_Tablet_Tablet;
        public InputActionMap Get() { return m_Wrapper.m_Tablet; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TabletActions set) { return set.Get(); }
        public void SetCallbacks(ITabletActions instance)
        {
            if (m_Wrapper.m_TabletActionsCallbackInterface != null)
            {
                @SwitchCamUp.started -= m_Wrapper.m_TabletActionsCallbackInterface.OnSwitchCamUp;
                @SwitchCamUp.performed -= m_Wrapper.m_TabletActionsCallbackInterface.OnSwitchCamUp;
                @SwitchCamUp.canceled -= m_Wrapper.m_TabletActionsCallbackInterface.OnSwitchCamUp;
                @SwitchCamDown.started -= m_Wrapper.m_TabletActionsCallbackInterface.OnSwitchCamDown;
                @SwitchCamDown.performed -= m_Wrapper.m_TabletActionsCallbackInterface.OnSwitchCamDown;
                @SwitchCamDown.canceled -= m_Wrapper.m_TabletActionsCallbackInterface.OnSwitchCamDown;
                @RotateCam.started -= m_Wrapper.m_TabletActionsCallbackInterface.OnRotateCam;
                @RotateCam.performed -= m_Wrapper.m_TabletActionsCallbackInterface.OnRotateCam;
                @RotateCam.canceled -= m_Wrapper.m_TabletActionsCallbackInterface.OnRotateCam;
                @Tablet.started -= m_Wrapper.m_TabletActionsCallbackInterface.OnTablet;
                @Tablet.performed -= m_Wrapper.m_TabletActionsCallbackInterface.OnTablet;
                @Tablet.canceled -= m_Wrapper.m_TabletActionsCallbackInterface.OnTablet;
            }
            m_Wrapper.m_TabletActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchCamUp.started += instance.OnSwitchCamUp;
                @SwitchCamUp.performed += instance.OnSwitchCamUp;
                @SwitchCamUp.canceled += instance.OnSwitchCamUp;
                @SwitchCamDown.started += instance.OnSwitchCamDown;
                @SwitchCamDown.performed += instance.OnSwitchCamDown;
                @SwitchCamDown.canceled += instance.OnSwitchCamDown;
                @RotateCam.started += instance.OnRotateCam;
                @RotateCam.performed += instance.OnRotateCam;
                @RotateCam.canceled += instance.OnRotateCam;
                @Tablet.started += instance.OnTablet;
                @Tablet.performed += instance.OnTablet;
                @Tablet.canceled += instance.OnTablet;
            }
        }
    }
    public TabletActions @Tablet => new TabletActions(this);
    public interface IPlayerActions
    {
        void OnFlashlight(InputAction.CallbackContext context);
        void OnMovement(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnLean(InputAction.CallbackContext context);
        void OnCrouch(InputAction.CallbackContext context);
        void OnTablet(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnNewaction(InputAction.CallbackContext context);
    }
    public interface ITabletActions
    {
        void OnSwitchCamUp(InputAction.CallbackContext context);
        void OnSwitchCamDown(InputAction.CallbackContext context);
        void OnRotateCam(InputAction.CallbackContext context);
        void OnTablet(InputAction.CallbackContext context);
    }
}
